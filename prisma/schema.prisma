generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workspace {
  id          String  @id @default(cuid())
  name        String
  slug        String  @unique
  description String?

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  simulations             Simulation[]
  databricksSQLDataSource DatabricksSQLDataSource[]

  @@map("workspaces")
}

model Simulation {
  id          String  @id @default(cuid())
  name        String
  description String?

  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String    @map("workspace_id")

  executions Execution[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("simulations")
}

enum ExecutionStatus {
  DRAFT
  PENDING
  RUNNING
  COMPLETED
  ERROR
  CALCULATED
  ERROR_WHILE_CALCULATING
}

model Execution {
  id      String          @id @default(cuid())
  status  ExecutionStatus @default(PENDING)
  error   String?
  current Boolean?        @default(true)

  query  String?
  values Json?

  readyStateAt DateTime? @map("ready_state_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  simulation   Simulation? @relation(fields: [simulationId], references: [id])
  simulationId String?     @map("simulation_id")

  formulas FormulaExecution[]

  @@map("executions")
}

model FormulaExecution {
  id String @id @default(cuid())

  formula   Formula @relation(fields: [formulaId], references: [id], onDelete: Cascade)
  formulaId String  @map("formula_id")

  execution   Execution @relation(fields: [executionId], references: [id], onDelete: Cascade)
  executionId String    @map("execution_id")

  result Float
  error  String?

  createdAt DateTime  @default(now()) @map("created_at")
  readyAt   DateTime? @map("ready_at")
}

model Formula {
  id          String  @id @default(cuid())
  name        String
  description String?
  expression  String

  variables  Variable[]
  executions FormulaExecution[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Variable {
  id           String  @id @default(cuid())
  name         String
  description  String?
  key          String?
  exampleValue Float?  @map("example_value")
  value        Float?
  isConstant   Boolean @default(false) @map("is_constant")

  formulaId String  @map("formula_id")
  formula   Formula @relation(fields: [formulaId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([formulaId, name])
}

model DatabricksSQLDataSource {
  id        String  @id @default(cuid())
  name      String
  token     String
  hostname  String
  httpPath  String  @map("http_path")
  catalog   String  @default("")
  schema    String  @default("")
  notes     String?
  structure String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  lastConnection DateTime? @map("last_connection")
  connError      String?   @map("conn_error")
  isDefault      Boolean   @default(false) @map("is_default")

  workspaceId String    @map("workspace_id")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model SqlSnippet {
  id            String  @id @default(cuid())
  name          String
  description   String?
  code          String
  documentation String?
  isPublic      Boolean @default(false)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  folder   SnippetFolder? @relation(fields: [folderId], references: [id])
  folderId String?        @map("folder_id")
}

model SnippetFolder {
  id          String  @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean @default(false)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  sqlSnippets  SqlSnippet[]
  parentFolder SnippetFolder?  @relation("FolderHierarchy", fields: [parentId], references: [id])
  parentId     String?         @map("parent_id")
  childFolders SnippetFolder[] @relation("FolderHierarchy")
}
